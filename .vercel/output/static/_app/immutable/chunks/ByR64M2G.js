import"./Bzak7iHL.js";import"./vaeYXnz6.js";import{f as l,s as a,aj as u,a as c,c as s,r,n as d}from"./CGDq_wfd.js";import{h as o}from"./Dw668-Tr.js";const g={title:"01 – Überblick & Lernpfad"},{title:A}=g;var D=l('<h1 id="willkommen-im-sveltekit-lernblog">Willkommen im SvelteKit Lernblog<a href="#willkommen-im-sveltekit-lernblog" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h1> <p>Dieses Dokument ist dein Startpunkt. Es erklärt Zielsetzung, Technik-Stack und den empfohlenen Lernpfad. Das Projekt richtet sich an Junior-Entwickler:innen, die moderne Web-Patterns verstehen möchten.</p> <h2 id="ziele">Ziele<a href="#ziele" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><strong>Sofort lauffähig:</strong> <code>npm install && npm run dev</code></li> <li><strong>Didaktisch aufbereitet:</strong> Jeder Code besitzt Datei-Header und Inline-Kommentare.</li> <li><strong>Produktionsnahe Features:</strong> Theming, Suche, SEO und Deployment.</li></ul> <h2 id="tech-stack-auf-einen-blick">Tech-Stack auf einen Blick<a href="#tech-stack-auf-einen-blick" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <pre class="language-undefined"><!></pre> <h2 id="architektur-diagramm">Architektur-Diagramm<a href="#architektur-diagramm" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <pre class="language-undefined"><!></pre> <h2 id="lernpfad">Lernpfad<a href="#lernpfad" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ol><li><strong>Lesen:</strong> Arbeite die Dateien in <code>/docs</code> der Reihenfolge nach durch.</li> <li><strong>Experimentieren:</strong> Passe Komponenten in <code>src/lib/components</code> an.</li> <li><strong>Analysieren:</strong> Untersuche <code>src/lib/content/index.ts</code>, um Content-Scanning zu verstehen.</li> <li><strong>Erweitern:</strong> Schreibe eigene Posts in <code>/content/blog</code>.</li></ol> <h2 id="nächste-schritte">Nächste Schritte<a href="#n%C3%A4chste-schritte" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li>Lies <a href="./02-architektur"><code>02-architektur</code></a> für tiefergehende Strukturinfos.</li> <li>Öffne das Projekt im Editor und folge den Kommentaren – sie sind bewusst ausführlich.</li></ul> <p>Viel Spaß beim Lernen!</p>',1);function z(n){var e=D(),t=a(u(e),10),i=s(t);o(i,()=>`<code class="language-undefined">SvelteKit  •  TypeScript strict  •  Tailwind 3
MDsveX     •  Fuse.js            •  @sveltejs/adapter-vercel</code>`),r(t);var h=a(t,4),b=s(h);o(b,()=>`<code class="language-undefined">┌──────────────────────────────────────────────┐
│ src/                                         │
│  ├─ routes/   → Layout + Seiten              │
│  ├─ lib/      → Komponenten + Content-Logik  │
│  └─ styles/   → globale CSS-Variablen        │
│ content/      → Markdown, MDsveX, Svelte      │
│ docs/         → Lernunterlagen               │
└──────────────────────────────────────────────┘</code>`),r(h),d(10),c(n,e)}const E=Object.freeze(Object.defineProperty({__proto__:null,default:z,metadata:g},Symbol.toStringTag,{value:"Module"})),p={title:"02 – Architektur & Datenfluss"},{title:I}=p;var w=l('<h1 id="architektur--datenfluss">Architektur & Datenfluss<a href="#architektur--datenfluss" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h1> <p>Dieses Dokument vertieft, wie Daten vom Dateisystem über den Content-Indexer bis in die UI gelangen.</p> <h2 id="high-level-datenfluss">High-Level-Datenfluss<a href="#high-level-datenfluss" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ol><li><strong>Content-Dateien</strong> (<code>.md</code>, <code>.svx</code>, <code>.svelte</code>) liegen in <code>/content/blog</code>.</li> <li><strong><code>import.meta.glob</code></strong> sammelt alle Beiträge in <code>src/lib/content/index.ts</code>.</li> <li><strong><code>createPost()</code></strong> normalisiert Metadaten, generiert Auto-Hashtags und baut den <code>BlogPost</code>.</li> <li><strong><code>getContentIndex()</code></strong> liefert <code>posts</code>, <code>hashtags</code>, <code>topics</code>, <code>searchDocuments</code>.</li> <li><strong><code>+layout.ts</code></strong> ruft <code>getContentIndex()</code> auf und macht die Daten für alle Seiten verfügbar.</li> <li><strong>UI-Komponenten</strong> (Listen, Suche, Detailansicht) verbrauchen diese Daten.</li></ol> <h2 id="dateisystemstruktur">Dateisystemstruktur<a href="#dateisystemstruktur" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <pre class="language-undefined"><!></pre> <h2 id="wichtige-konzepte">Wichtige Konzepte<a href="#wichtige-konzepte" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><strong>Caching:</strong> Der Content-Index wird in einer Modul-Variable (<code>cache</code>) gehalten. Während der Entwicklung sorgt HMR dafür, dass bei Dateiänderungen der Cache neu erzeugt wird.</li> <li><strong>SSG + CSR:</strong> <code>prerender = true</code> erzeugt statische HTML-Dateien. Clientseitige Navigation sorgt dennoch für schnelle Wechsel.</li> <li><strong>Alias-Pfade:</strong> <code>$components</code>, <code>$content</code>, <code>$styles</code> erlauben kurze Importpfade und werden in <code>svelte.config.js</code> sowie <code>vite.config.ts</code> definiert.</li></ul> <h2 id="erweiterungen">Erweiterungen<a href="#erweiterungen" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><strong>Mehrsprachigkeit:</strong> Ergänze <code>locale</code> im Frontmatter und filtere in <code>getContentIndex()</code>.</li> <li><strong>Drafts:</strong> Füge ein Flag <code>draft: true</code> hinzu und filtere Beiträge im Production-Build.</li> <li><strong>Remote-Content:</strong> Wenn du CMS-Daten hinzuladen willst, koppel <code>getContentIndex()</code> mit Fetch-Requests und muxe lokale wie entfernte Inhalte.</li></ul> <p>Nächster Stopp: <a href="./03-content-workflow"><code>03-content-workflow</code></a> erklärt, wie du neuen Content erzeugst und welche Felder im Frontmatter erlaubt sind.</p>',1);function v(n){var e=w(),t=a(u(e),10),i=s(t);o(i,()=>`<code class="language-undefined">src/
├─ routes/
│  ├─ +layout.&#123;svelte,ts&#125;   → globale UI &amp; SEO
│  ├─ +page.svelte          → Landingpage
│  ├─ blog/                 → Listing + Details
│  ├─ search/               → Fuse.js Suche
│  └─ tags/                 → Hashtag-/Topic-Index
├─ lib/
│  ├─ components/           → UI-Bausteine
│  ├─ content/              → Index, Hashtags, Stopwörter
│  └─ config/site.ts        → Metadaten
└─ styles/globals.css       → Tailwind Baseline + Theme Variablen</code>`),r(t),d(10),c(n,e)}const L=Object.freeze(Object.defineProperty({__proto__:null,default:v,metadata:p},Symbol.toStringTag,{value:"Module"})),k={title:"03 – Content-Workflow"},{title:H}=k;var S=l('<h1 id="content-workflow">Content-Workflow<a href="#content-workflow" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h1> <p>Dieses Kapitel zeigt, wie du Beiträge erstellst, welche Felder im Frontmatter Pflicht sind und wie Auto-Hashtags entstehen.</p> <h2 id="frontmatter-referenz">Frontmatter Referenz<a href="#frontmatter-referenz" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <pre class="language-yaml"><!></pre> <blockquote><p><strong>Hinweis:</strong> Bei <code>.svelte</code>-Posts exportierst du <code>metadata</code> im <code>&lt;script&gt;</code>. Der Inhalt entspricht dem Frontmatter.</p></blockquote> <h2 id="dateiformate">Dateiformate<a href="#dateiformate" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><strong>Markdown (.md):</strong> Ideal für klassische Artikel.</li> <li><strong>MDsveX (.svx):</strong> Kombiniert Markdown mit interaktiven Svelte-Komponenten.</li> <li><strong>Svelte (.svelte):</strong> Wenn du die volle Power von Svelte brauchst (z. B. komplexe Demos).</li></ul> <h2 id="auto-hashtags-verstehen">Auto-Hashtags verstehen<a href="#auto-hashtags-verstehen" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <p><code>extractHashtags()</code> scannt den Rohtext der Datei:</p> <ol><li>Tokenisierung (<code>split(/\\s+/)</code>).</li> <li>Normalisierung (<code>normalizeHashtag</code>).</li> <li>Stopwort-Filter (<code>stopwords.de.txt</code>).</li> <li>Frequenzanalyse (Top <code>max</code> Begriffe).</li> <li>Whitelist (stellt sicher, dass manuelle Tags priorisiert sind).</li></ol> <p>Das Ergebnis landet in <code>post.autoHashtags</code>. In der UI werden manuelle Tags und Auto-Hashtags zusammen angezeigt.</p> <h2 id="workflow-empfehlung">Workflow-Empfehlung<a href="#workflow-empfehlung" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ol><li><strong>Entwurf schreiben:</strong> Lege die Datei in <code>/content/blog</code> an.</li> <li><strong>Metadaten pflegen:</strong> Achte auf Datum, Tags, Topics und <code>layout</code>.</li> <li><strong>Lokale Vorschau:</strong> <code>npm run dev</code> und Seite <code>http://localhost:5173/blog/&lt;slug&gt;</code>.</li> <li><strong>Build prüfen:</strong> <code>npm run build</code> bevor du pushst.</li></ol> <h2 id="häufige-fehler">Häufige Fehler<a href="#h%C3%A4ufige-fehler" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><strong>Kein Frontmatter:</strong> <code>createPost()</code> wirft bewusst einen Fehler.</li> <li><strong>Falscher Cover-Pfad:</strong> Assets müssen unter <code>/static</code> liegen.</li> <li><strong>Datum im falschen Format:</strong> Verwende ISO-Strings (<code>YYYY-MM-DD</code>), damit Sortierung korrekt funktioniert.</li></ul> <p>Weiter geht es mit Styling-Themen: <a href="./04-styling-und-theming"><code>04-styling-und-theming</code></a>.</p>',1);function _(n){var e=S(),t=a(u(e),6),i=s(t);o(i,()=>`<code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">layout</span><span class="token punctuation">:</span> blog           <span class="token comment"># Pflicht für Markdown/MDsveX</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">"Dein Titel"</span>    <span class="token comment"># Pflicht</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token string">"2025-06-01"</span>     <span class="token comment"># Pflicht, ISO-Format</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"svelte"</span><span class="token punctuation">,</span> <span class="token string">"css"</span><span class="token punctuation">]</span>    <span class="token comment"># optionale Hashtags (werden kleingeschrieben)</span>
<span class="token key atrule">topics</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Frontend"</span><span class="token punctuation">]</span>       <span class="token comment"># optionale Themen (werden 1:1 übernommen)</span>
<span class="token key atrule">excerpt</span><span class="token punctuation">:</span> <span class="token string">"Teaser-Text"</span>    <span class="token comment"># optional, sonst autogeneriert</span>
<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token string">"/images/dein-cover.svg"</span> <span class="token comment"># optional</span>
<span class="token punctuation">---</span></code>`),r(t),d(24),c(n,e)}const B=Object.freeze(Object.defineProperty({__proto__:null,default:_,metadata:k},Symbol.toStringTag,{value:"Module"})),f={title:"04 – Styling & Theming"},{title:K}=f;var y=l(`<h1 id="styling--theming">Styling & Theming<a href="#styling--theming" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h1> <p>Hier lernst du, wie Tailwind, CSS-Variablen und der Theme-Toggle zusammenspielen.</p> <h2 id="globale-styles">Globale Styles<a href="#globale-styles" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><code>src/styles/globals.css</code> bindet Tailwind-Layer (<code>@tailwind base/components/utilities</code>).</li> <li>CSS-Variablen (<code>--color-*</code>) definieren Oberflächen, Text- und Akzentfarben.</li> <li><code>prefers-reduced-motion</code> reduziert Animationen für empfindliche Nutzer:innen.</li></ul> <h2 id="tailwind-konfiguration">Tailwind-Konfiguration<a href="#tailwind-konfiguration" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <p>Wichtige Highlights aus <code>tailwind.config.cjs</code>:</p> <ul><li><code>darkMode: ['class', '[data-theme="dark"]']</code> lässt dich sowohl Klassen als auch Attribute nutzen.</li> <li><code>container</code>-Option sorgt dafür, dass Inhalte mittig sitzen und adaptiv padding erhalten.</li> <li>Erweiterte Farben greifen auf die CSS-Variablen zu.</li> <li>Plugins: <code>@tailwindcss/typography</code> (Prosa-Styling) + <code>@tailwindcss/container-queries</code>.</li></ul> <h2 id="themetoggle-logik">ThemeToggle Logik<a href="#themetoggle-logik" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ol><li>Liest Nutzerpräferenz aus <code>localStorage</code>.</li> <li>Ermittelt System-Theme via <code>matchMedia('(prefers-color-scheme: dark)')</code>.</li> <li>Aktualisiert <code>document.documentElement.dataset.theme</code>.</li> <li>Schreibt <code>&lt;meta name="theme-color"&gt;</code> um, damit Browser-Chrome passt.</li> <li>Lauscht auf <code>prefers-contrast</code> und setzt <code>data-contrast</code>.</li></ol> <h2 id="komponenten-anpassen">Komponenten anpassen<a href="#komponenten-anpassen" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li>Nutze Utility-Klassen wie <code>bg-surface/80</code>, damit die Theme-Variablen greifen.</li> <li>Für Container-Queries wendest du <code>@container</code> und responsive Utilities (<code>@lg:mx-8</code>) an.</li> <li>Typografie: Wrapped Markdown nutzt <code>prose</code>. Passe <code>tailwind.config.cjs</code> an, um Codeblöcke zu stylen.</li></ul> <h2 id="experimentierideen">Experimentierideen<a href="#experimentierideen" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li>Füge ein drittes Theme (Sepia) hinzu, indem du weitere CSS-Variablen definierst.</li> <li>Erweitere <code>ThemeToggle</code>, sodass ein Dropdown alle Varianten anzeigt.</li> <li>Implementiere <code>prefers-contrast: more</code> Styling (z. B. dickere Grenzen, größere Schrift).</li></ul> <p>Als Nächstes: <a href="./05-suche-und-filter"><code>05-suche-und-filter</code></a> erklärt Fuse.js und die Filtermechanik.</p>`,1);function T(n){var e=y();d(26),c(n,e)}const O=Object.freeze(Object.defineProperty({__proto__:null,default:T,metadata:f},Symbol.toStringTag,{value:"Module"})),m={title:"05 – Suche & Filter"},{title:$}=m;var F=l(`<h1 id="suche--filter">Suche & Filter<a href="#suche--filter" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h1> <p>Die Suche kombiniert Fuse.js mit clientseitiger URL-Synchronisation. Dieser Guide beschreibt die Architektur und Möglichkeiten zur Erweiterung.</p> <h2 id="datenbasis">Datenbasis<a href="#datenbasis" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><code>searchDocuments</code> stammt aus <code>getContentIndex()</code>.</li> <li>Jedes Dokument enthält <code>title</code>, <code>excerpt</code>, <code>content</code>, <code>tags</code>, <code>topics</code>, <code>autoHashtags</code>.</li> <li>Fuse.js wird einmal beim Rendern von <code>/search</code> instanziiert.</li></ul> <h2 id="fusejs-konfiguration">Fuse.js Konfiguration<a href="#fusejs-konfiguration" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <pre class="language-ts"><!></pre> <ul><li><code>threshold</code> bestimmt, wie tolerant die Suche ist (kleiner = strenger).</li> <li><code>includeScore</code> erlaubt, Ergebnisse nach Relevanzsortierung zu interpretieren (optional ausgeben).</li></ul> <h2 id="url-synchronisation">URL-Synchronisation<a href="#url-synchronisation" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><code>SearchBar</code> dispatcht das <code>search</code>-Event nach 250 ms Debounce.</li> <li><code>runSearch()</code> aktualisiert <code>window.location.search</code> via <code>goto(..., &#123; replaceState: true &#125;)</code>.</li> <li>Reactive Statement lauscht auf <code>$page.url.searchParams</code>, sodass Back/Forward-Buttons funktionieren.</li></ul> <h2 id="filter-auf-blog">Filter auf /blog<a href="#filter-auf-blog" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><code>TagChips</code> verwenden <code>dispatch('toggle', tag)</code>.</li> <li>Der Blog filtert Posts, indem er prüft, ob alle ausgewählten Tags/Topics in den Datensätzen enthalten sind.</li> <li>Filter kombinieren sich per logischem UND: Alle ausgewählten Hashtags müssen passen.</li></ul> <h2 id="erweiterungen">Erweiterungen<a href="#erweiterungen" class="heading-anchor" aria-label="Direktlink zu dieser Überschrift" title="Direktlink zu dieser Überschrift">#</a></h2> <ul><li><strong>Server-Suche:</strong> Baue eine API-Route, die <code>searchDocuments</code> als JSON ausliefert.</li> <li><strong>Facet-Zähler:</strong> Zeige neben jedem Tag an, wie viele Beiträge nach aktuellem Filter übrig bleiben.</li> <li><strong>Highlighting:</strong> Markiere Trefferwörter im Auszug (z. B. via <code>Fuse.js</code> Match-Daten).</li></ul> <p>Damit endet der Lernpfad. Kehre zu den Komponenten zurück, probiere Anpassungen aus und dokumentiere deine Ergebnisse im README, damit dein Team davon profitiert.</p>`,1);function x(n){var e=F(),t=a(u(e),10),i=s(t);o(i,()=>`<code class="language-ts"><span class="token keyword">const</span> fuse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fuse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>searchDocuments<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  includeScore<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  threshold<span class="token operator">:</span> <span class="token number">0.35</span><span class="token punctuation">,</span>
  keys<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'tags'</span><span class="token punctuation">,</span> <span class="token string">'topics'</span><span class="token punctuation">,</span> <span class="token string">'autoHashtags'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),r(t),d(16),c(n,e)}const R=Object.freeze(Object.defineProperty({__proto__:null,default:x,metadata:m},Symbol.toStringTag,{value:"Module"}));export{R as _,O as a,B as b,L as c,E as d};
